<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>醉里挑灯看剑</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-17T10:26:09.742Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>希音</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SQLite学习笔记</title>
    <link href="http://yoursite.com/2019/02/27/SQLite%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/02/27/SQLite学习笔记/</id>
    <published>2019-02-27T01:46:30.000Z</published>
    <updated>2019-04-17T10:26:09.742Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SQLite简介"><a href="#SQLite简介" class="headerlink" title="SQLite简介"></a>SQLite简介</h3><p>SQLite是一个进程内的库，实现了自给自足的、无服务器的、零配置的、事务性的SQL数据库引擎。它是一个零配置的数据库，这意味着与其他数据库一样，您不需要在系统中配置。<br>就像其他数据库，SQLite引擎不是一个独立的进程，可以按应用程序需求进行静态或动态连接。SQLite直接访问其存储文件。</p><h3 id="SQLite安装"><a href="#SQLite安装" class="headerlink" title="SQLite安装"></a>SQLite安装</h3><h2 id="在windows上安装SQLite"><a href="#在windows上安装SQLite" class="headerlink" title="在windows上安装SQLite"></a>在windows上安装SQLite</h2><ul><li>请访问<a href="https://www.sqlite.org/download.html" target="_blank" rel="noopener">SQLite下载页面</a>，从winsdows区下载预编译的二进制文件。</li><li>您需要下载sqlite-tools-win32-<em>.zip和sqlite-dll-win32-</em>.zip压缩文件</li><li>创建文件夹 C:\sqlite，并在此文件夹下解压上面两个压缩文件，将得到 sqlite3.def、sqlite3.dll 和 sqlite3.exe 文件。</li><li>添加 C:\sqlite 到 PATH 环境变量，最后在命令提示符下，使用 sqlite3 命令，将显示如下结果。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;sqlite3</span><br><span class="line">SQLite version 3.7.15.2 2013-01-09 11:53:05</span><br><span class="line">Enter &quot;.help&quot; for instructions</span><br><span class="line">Enter SQL statements terminated with a &quot;;&quot;</span><br><span class="line">sqlite&gt;</span><br></pre></td></tr></table></figure><h3 id="在Linux上安装SQLite"><a href="#在Linux上安装SQLite" class="headerlink" title="在Linux上安装SQLite"></a>在Linux上安装SQLite</h3><p>查看本机是否已经安装了SQLite<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sqlite3</span><br><span class="line">SQLite version 3.7.15.2 2013-01-09 11:53:05</span><br><span class="line">Enter &quot;.help&quot; for instructions</span><br><span class="line">Enter SQL statements terminated with a &quot;;&quot;</span><br><span class="line">sqlite&gt;</span><br></pre></td></tr></table></figure></p><p>如果没有，可以使用apt-get安装</p><h3 id="在Mac-OS-X-上安装SQLite"><a href="#在Mac-OS-X-上安装SQLite" class="headerlink" title="在Mac OS X 上安装SQLite"></a>在Mac OS X 上安装SQLite</h3><p>最新版本的Mac OS X 会预安装SQLite,但是如果没有可用的安装，只需按照如下步骤进行：<br>请访问<a href="https://www.sqlite.org/download.html" target="_blank" rel="noopener">SQLite下载页面</a>,从源代码区下载sqlite-autoconf-*.tar.gz。<br>步骤如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ tar xvzf sqlite-autoconf-3071502.tar.gz</span><br><span class="line">$ cd sqlite-autoconf-3071502</span><br><span class="line">$ ./configure --prefix=/usr/local</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure></p><p>上述步骤将在 Mac OS X 机器上安装 SQLite，您可以使用下列命令进行验证：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sqlite3</span><br><span class="line">SQLite version 3.7.15.2 2013-01-09 11:53:05</span><br><span class="line">Enter &quot;.help&quot; for instructions</span><br><span class="line">Enter SQL statements terminated with a &quot;;&quot;</span><br><span class="line">sqlite&gt;</span><br></pre></td></tr></table></figure></p><h3 id="SQLite命令"><a href="#SQLite命令" class="headerlink" title="SQLite命令"></a>SQLite命令</h3><p>在命令提示符下键入一个简单的 sqlite3 命令，在 SQLite 命令提示符下，您可以使用各种 SQLite 命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sqlite3</span><br><span class="line">SQLite version 3.3.6</span><br><span class="line">Enter &quot;.help&quot; for instructions</span><br><span class="line">sqlite&gt;</span><br></pre></td></tr></table></figure></p><p>如需获取可用的点命令的清单，可以在任何时候输入 “.help”。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt;.help</span><br></pre></td></tr></table></figure></p><p>上面的命令会显示各种重要的 SQLite 点命令的列表，如下所示：<br>命令|描述<br>—|:–:|<br>.backup?DB?FILE|备份DB数据库（默认是“main”）到FILE文件<br>.bail ON|OFF|发生错误后停止。默认为OFF。<br>.databases|列出数据库的名称及其所依附的文件<br>.dump?TABLE?|以SQL文本格式转储数据库。如果指定了TABLE表，则只转储匹配LIKE模式的TABLE表<br>.echo ON&amp;#124OFF|开启或关闭日志。FILE文件可以是stderr(标准错误)/stdout(标准输出)<br>.mode MODE|设置输出模式，MODE可以是下列之一：<br>.nullvalues STRING|在NULL值的地方输出STRING字符串<br>.output FILENAME|发送输出到FILENAME文件<br>.output stdout|发送输出到屏幕<br>.print STRING…逐字地输出STRING字符串<br>.prompt MAIN CONTINUM|替换标准提示符<br>.quit|退出SQLite提示符<br>.read FILENAME|执行FILENAME文件中的SQL<br>.schema?TABLE?|显示CREATE语句。如果指定了TABLE表，则只显示匹配LIKE模式的TABLE表</p><h3 id="SQLite语法"><a href="#SQLite语法" class="headerlink" title="SQLite语法"></a>SQLite语法</h3><ul><li>SQLite 是不区分大小写的，但也有一些命令是大小写敏感的，比如GLOB和glob在SQLite的语句中有不同的含义</li><li>SQLite 注释以两个连续的 “-“ 字符（ASCII 0x2d）开始，并扩展至下一个换行符（ASCII 0x0a）或直到输入结束，以先到者为准。</li><li>所有的 SQLite 语句可以以任何关键字开始，如 SELECT、INSERT、UPDATE、DELETE、ALTER、DROP 等，所有的语句以分号（;）结束。</li></ul><h3 id="SQLite数据类型"><a href="#SQLite数据类型" class="headerlink" title="SQLite数据类型"></a>SQLite数据类型</h3><p>SQLite 数据类型是一个用来指定任何对象的数据类型的属性。SQLite 中的每一列，每个变量和表达式都有相关的数据类型。<br>您可以在创建表的同时使用这些数据类型。SQLite 使用一个更普遍的动态类型系统。在 SQLite 中，值的数据类型与值本身是相关的，而不是与它的容器相关。</p><h3 id="SQLite-创建数据库"><a href="#SQLite-创建数据库" class="headerlink" title="SQLite 创建数据库"></a>SQLite 创建数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sqlite3 DatabaseName.db</span><br></pre></td></tr></table></figure><h3 id="SQLite-附加数据库"><a href="#SQLite-附加数据库" class="headerlink" title="SQLite 附加数据库"></a>SQLite 附加数据库</h3><p>假设这样一种情况，当在同一时间有多个数据库可用，您想使用其中的任何一个。SQLite 的 ATTACH DATABASE 语句是用来选择一个特定的数据库，使用该命令后，所有的 SQLite 语句将在附加的数据库下执行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ATTACH DATABASE &apos;DatabaseName&apos; As &apos;Alias-Name&apos;;</span><br></pre></td></tr></table></figure></p><h3 id="分离数据库"><a href="#分离数据库" class="headerlink" title="分离数据库"></a>分离数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DETACH DATABASE &apos;Alias-Name&apos;;</span><br></pre></td></tr></table></figure><h3 id="SQLite创建表"><a href="#SQLite创建表" class="headerlink" title="SQLite创建表"></a>SQLite创建表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE database_name.table_name(</span><br><span class="line">   column1 datatype  PRIMARY KEY(one or more columns),</span><br><span class="line">   column2 datatype,</span><br><span class="line">   column3 datatype,</span><br><span class="line">   .....</span><br><span class="line">   columnN datatype,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="SQLite-删除表"><a href="#SQLite-删除表" class="headerlink" title="SQLite 删除表"></a>SQLite 删除表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE database_name.table_name;</span><br></pre></td></tr></table></figure><h3 id="SQLite-Insert语句"><a href="#SQLite-Insert语句" class="headerlink" title="SQLite Insert语句"></a>SQLite Insert语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO TABLE_NAME [(column1, column2, column3,...columnN)]  </span><br><span class="line">VALUES (value1, value2, value3,...valueN);</span><br></pre></td></tr></table></figure><h3 id="SQLite-select语句"><a href="#SQLite-select语句" class="headerlink" title="SQLite select语句"></a>SQLite select语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT column1, column2, columnN FROM table_name;</span><br></pre></td></tr></table></figure><h3 id="SQLite运算符"><a href="#SQLite运算符" class="headerlink" title="SQLite运算符"></a>SQLite运算符</h3><p>运算符是一个保留字或字符，主要用于 SQLite 语句的 WHERE 子句中执行操作，如比较和算术运算。<br>运算符用于指定 SQLite 语句中的条件，并在语句中连接多个条件。</p><ul><li>算术运算符</li><li>比较运算符</li><li>逻辑运算符</li><li>位运算符</li></ul><h3 id="SQLite-表达式"><a href="#SQLite-表达式" class="headerlink" title="SQLite 表达式"></a>SQLite 表达式</h3><h2 id="布尔表达式"><a href="#布尔表达式" class="headerlink" title="布尔表达式"></a>布尔表达式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT column1, column2, columnN </span><br><span class="line">FROM table_name </span><br><span class="line">WHERE SINGLE VALUE MATCHING EXPRESSION;</span><br></pre></td></tr></table></figure><h2 id="数值表达式"><a href="#数值表达式" class="headerlink" title="数值表达式"></a>数值表达式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT numerical_expression as  OPERATION_NAME</span><br><span class="line">[FROM table_name WHERE CONDITION] ;</span><br></pre></td></tr></table></figure><h2 id="日期表达式"><a href="#日期表达式" class="headerlink" title="日期表达式"></a>日期表达式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlite&gt;  SELECT CURRENT_TIMESTAMP;</span><br><span class="line">CURRENT_TIMESTAMP = 2013-03-17 10:43:35</span><br></pre></td></tr></table></figure><h3 id="SQLite-WHERE子句"><a href="#SQLite-WHERE子句" class="headerlink" title="SQLite WHERE子句"></a>SQLite WHERE子句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT column1, column2, columnN </span><br><span class="line">FROM table_name</span><br><span class="line">WHERE [condition]</span><br></pre></td></tr></table></figure><h3 id="SQLite-AND-OR-运算符"><a href="#SQLite-AND-OR-运算符" class="headerlink" title="SQLite AND/OR 运算符"></a>SQLite AND/OR 运算符</h3><h2 id="AND-运算符"><a href="#AND-运算符" class="headerlink" title="AND 运算符"></a>AND 运算符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT column1, column2, columnN </span><br><span class="line">FROM table_name</span><br><span class="line">WHERE [condition1] AND [condition2]...AND [conditionN];</span><br></pre></td></tr></table></figure><h2 id="OR-运算符"><a href="#OR-运算符" class="headerlink" title="OR 运算符"></a>OR 运算符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT column1, column2, columnN </span><br><span class="line">FROM table_name</span><br><span class="line">WHERE [condition1] OR [condition2]...OR [conditionN]</span><br></pre></td></tr></table></figure><h3 id="SQLite-Update-语句"><a href="#SQLite-Update-语句" class="headerlink" title="SQLite Update 语句"></a>SQLite Update 语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE table_name</span><br><span class="line">SET column1 = value1, column2 = value2...., columnN = valueN</span><br><span class="line">WHERE [condition];</span><br></pre></td></tr></table></figure><h3 id="SQLite-Delete-语句"><a href="#SQLite-Delete-语句" class="headerlink" title="SQLite Delete 语句"></a>SQLite Delete 语句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM table_name</span><br><span class="line">WHERE [condition];</span><br></pre></td></tr></table></figure><h3 id="SQLite-Like-子句"><a href="#SQLite-Like-子句" class="headerlink" title="SQLite Like 子句"></a>SQLite Like 子句</h3><p>SQLite 的 LIKE 运算符是用来匹配通配符指定模式的文本值。如果搜索表达式与模式表达式匹配，LIKE 运算符将返回真（true），也就是 1。这里有两个通配符与 LIKE 运算符一起使用：</p><ul><li>百分号（%）</li><li>下划线（—）<br>分号（%）代表零个、一个或多个数字或字符。下划线（_）代表一个单一的数字或字符。这些符号可以被组合使用。</li></ul><h3 id="SQLite-GLob-子句"><a href="#SQLite-GLob-子句" class="headerlink" title="SQLite GLob 子句"></a>SQLite GLob 子句</h3><p>SQLite 的 GLOB 运算符是用来匹配通配符指定模式的文本值。如果搜索表达式与模式表达式匹配，GLOB 运算符将返回真（true），也就是 1。与 LIKE 运算符不同的是，GLOB 是大小写敏感的，对于下面的通配符，它遵循 UNIX 的语法。</p><ul><li>星号 （*）</li><li>问号 （?）<br>星号（*）代表零个、一个或多个数字或字符。问号（?）代表一个单一的数字或字符。这些符号可以被组合使用。</li></ul><h3 id="SQLite-limit子句"><a href="#SQLite-limit子句" class="headerlink" title="SQLite limit子句"></a>SQLite limit子句</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT column1, column2, columnN </span><br><span class="line">FROM table_name</span><br><span class="line">LIMIT [no of rows] OFFSET [row num]</span><br></pre></td></tr></table></figure><h3 id="SQLite-Order-By"><a href="#SQLite-Order-By" class="headerlink" title="SQLite Order By"></a>SQLite Order By</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT column-list </span><br><span class="line">FROM table_name </span><br><span class="line">[WHERE condition] </span><br><span class="line">[ORDER BY column1, column2, .. columnN] [ASC | DESC];</span><br></pre></td></tr></table></figure><h3 id="SQLite-Group-By"><a href="#SQLite-Group-By" class="headerlink" title="SQLite Group By"></a>SQLite Group By</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT column-list</span><br><span class="line">FROM table_name</span><br><span class="line">WHERE [ conditions ]</span><br><span class="line">GROUP BY column1, column2....columnN</span><br><span class="line">ORDER BY column1, column2....columnN</span><br></pre></td></tr></table></figure><h3 id="Having-子句"><a href="#Having-子句" class="headerlink" title="Having 子句"></a>Having 子句</h3><p>HAVING 子句允许指定条件来过滤将出现在最终结果中的分组结果。<br>WHERE 子句在所选列上设置条件，而 HAVING 子句则在由 GROUP BY 子句创建的分组上设置条件。</p><h3 id="SQLite-Distinct-关键字"><a href="#SQLite-Distinct-关键字" class="headerlink" title="SQLite Distinct 关键字"></a>SQLite Distinct 关键字</h3><p>SQLite 的 DISTINCT 关键字与 SELECT 语句一起使用，来消除所有重复的记录，并只获取唯一一次记录。<br>有可能出现一种情况，在一个表中有多个重复的记录。当提取这样的记录时，DISTINCT 关键字就显得特别有意义，它只获取唯一一次记录，而不是获取重复记录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT column1, column2,.....columnN </span><br><span class="line">FROM table_name</span><br><span class="line">WHERE [condition]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;SQLite简介&quot;&gt;&lt;a href=&quot;#SQLite简介&quot; class=&quot;headerlink&quot; title=&quot;SQLite简介&quot;&gt;&lt;/a&gt;SQLite简介&lt;/h3&gt;&lt;p&gt;SQLite是一个进程内的库，实现了自给自足的、无服务器的、零配置的、事务性的SQL数据库引
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java面向对象相关语法及其语义</title>
    <link href="http://yoursite.com/2018/12/13/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AF%AD%E6%B3%95%E7%9B%B8%E5%85%B3%E8%AF%AD%E6%B3%95%E5%8F%8A%E5%85%B6%E8%AF%AD%E4%B9%89/"/>
    <id>http://yoursite.com/2018/12/13/Java面向对象语法相关语法及其语义/</id>
    <published>2018-12-13T06:19:37.000Z</published>
    <updated>2019-01-03T09:30:59.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-面向对象概念"><a href="#Java-面向对象概念" class="headerlink" title="Java 面向对象概念"></a>Java 面向对象概念</h2><h3 id="对象的基本概念"><a href="#对象的基本概念" class="headerlink" title="对象的基本概念"></a>对象的基本概念</h3><p>所谓对象就是真实世界中的实体，对象与实体是一一对应的，也就是说现实世界中每一个实体都是一个对象，它是一种具体的概念。<br>对象有以下特点:</p><ul><li>对象是类的一个实例;</li><li>语义是表达Java类的一个实体;</li><li>对象是一般情况下Java语言里的”一等公民”;</li><li>对象可以赋值到一个变量;</li><li>对象通过new语句进行创建;</li></ul><h3 id="面向对象的三大特性"><a href="#面向对象的三大特性" class="headerlink" title="面向对象的三大特性"></a>面向对象的三大特性</h3><h4 id="封装（Encapsulation）"><a href="#封装（Encapsulation）" class="headerlink" title="封装（Encapsulation）"></a>封装（Encapsulation）</h4><p>在面向对象的程序设计中，封装是指一种将类实现细节部分包装，隐藏起来的方法。</p><ul><li>封装的方式：类<br>类是一个模板，它描述一类对象的行为和状态。语义上表达的是一类实体（对象）的抽象。</li><li>对类的内部状态的访问进行控制，只提供该提供的信息。</li><li>把代码分成两部分: 接口和实现。</li><li>接口因为涉及和外部的交互，对用户暴露，应该保持稳定，例如API库</li><li>内部实现不需要暴露给外部用户。在接口功能不被影响的前提下，可以随意修改和重构</li><li>良好的封装是解耦的基础</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">article</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span>  String content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如，创建一个article类，用private修饰符将title，content属性私有化，通过getter/setter方法读写属性，这样不仅可以控制title,content属性的可访问性，还可以在getter/setter方法中加入属性控制语句，比如，在setter方法中可以控制title,content的字数。</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><ul><li>继承是Java面向对象编程技术的一块基石，因为它允许创建分等级层次的类封装方式: 类。</li><li>子类继承父类的特征和行为，使得子类对象具有父类对象的特征和方法。</li><li>继承需要符合一个关系: is-a 子类是更具体的父类</li><li>在声明子类时候，通过关键字”extends”继承</li></ul><p>继承的特性: </p><ul><li>子类拥有父类非private的成员变量和方法。</li><li>子类可以拥有自己的成员变量和方法，即子类可以对父类进行扩展。</li><li>子类可以重新实现父类的方法。override</li><li>Java只支持单继承，即只能有一个父类</li><li>super关键字: 我们可以通过super关键字来实现对父类成员的访问，用来引用当前对象的父类</li><li>this关键字: 指向自己的引用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> String age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name,String age)</span> </span>&#123;</span><br><span class="line">        name = name;</span><br><span class="line">        age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"会走路"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name, String dog)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, dog);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"汪汪"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name, String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"喵喵"</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"会爬树"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dog和cat都是animal的子类，通过extends关键字继承父类的属性和方法。</p><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><h5 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h5><ul><li>目的就是用于继承之后定义子类的类，必然会用于定义子类</li><li>抽象类除了不能实例化对象之外，类的其他功能依然存在，成员变量、成员方法和构造方法的访问方式和普通类一样</li><li>由于抽象类不能实例化对象，所以抽象类必须被继承，才能被使用</li><li>使用修饰符abstract 声明一个类似抽象类，一般具有抽象方法：abstract void method();抽象方法只有声明，没有实现</li><li>子类继承抽象类之后，必须实现抽象方法，不然仍然为抽象类，可以override其他方法</li><li>static方法不能声明为抽象方法</li><li>is-a 关系！</li></ul><h5 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h5><ul><li>接口是一系列抽象方法（但不需要abstract修饰，隐式是public abstract）的集合</li><li>语义上表示具有一定的特性，比如<br>行走：但是没有如何行走的定义<br>显示：表示可以显示，但是没有如何显示的定义</li><li>接口成员变量只能是static final的。因为它不是类，不能实例化对象，所以不会有状态，只有属性</li><li>类通过关键字implements表达实现一个接口，从而声明这个类具有接口定义的属性和行为</li><li>类可以实现多个接口！例如表示：一个文件即可以显示也可以打印。 </li></ul><h5 id="多态-1"><a href="#多态-1" class="headerlink" title="多态"></a>多态</h5><ul><li><p>多态表示一个类型（父类或者接口）的变量的方法的具体实现行为由变量指向的具体对象确定</p></li><li><p>主要的实现方式：</p><ul><li>继承和接口</li><li>父类和接口类型的变量赋值子类对象</li><li>调用被override的方法</li></ul></li></ul><p>我们在NewsReader.java文件中定义了一个抽象类NewsReader来读取新闻，但读取的方式可能不同，需要具体的类实现，FileNewsReader.java和UrlNewsReader.java文件中定义的FileNewsReader和UrlNewsReader类继承NewsReader类并具体实现了readNews方法。<br>NewsReader.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span>  <span class="class"><span class="keyword">class</span> <span class="title">NewsReader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> News <span class="title">readNews</span><span class="params">()</span></span>; <span class="comment">//具有这个功能，但是具体的功能实现在子类中确定</span></span><br><span class="line">    <span class="comment">//文件、类</span></span><br><span class="line">    <span class="comment">// 纯文本，word,json,xml --&gt; 类</span></span><br><span class="line">    <span class="comment">// 标准输入 --&gt; 类</span></span><br><span class="line">    <span class="comment">// 语音识别 --&gt; 类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不同的reader</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>FileNewsReader.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileNewsReader</span> <span class="keyword">extends</span> <span class="title">NewsReader</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> News <span class="title">readNews</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> News(<span class="string">"abc"</span>, <span class="string">"test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>UrlNewsReader.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrlNewsReader</span> <span class="keyword">extends</span> <span class="title">NewsReader</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> News <span class="title">readNews</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> News(<span class="string">"efg"</span>, <span class="string">"testurl"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>抽象类和接口在语义上是不同的，实际开发中要根据语义选择适合的方式。比如狗和猫都是动物，具有一些共同的行为，可以将它们抽象成Animal类。而接口更多地表达一种行为，例如，video和Lecture都有需要展示的部分，但具体展示什么，如何展示就需要具体的类实现。<br>在Displayable.java中定义一个接口Displayable<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Displayable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在Video.java和Lecture.java中实现Displayable这个接口。<br>Video.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Video</span> <span class="keyword">implements</span> <span class="title">Displayable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在播放视频"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Lecture.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lecture</span> <span class="keyword">implements</span> <span class="title">Displayable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在上课中，播放讲义"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>多态本身是一种抽象化的体现，把一系列具体事物的共同特点抽象出来，再通过这个抽象的事物，与不同的具体事物进行对话。简单而言，就是“一个接口，多种实现”。Video和Lecture都是接口Displayable的具体实现。所以主方法中的viewNews方法接收的参数可以是Displayable,而调用时参数可以是Displayable的多种形态。从而避免了分别定义Lecture和Video的显示（ViewLecture和Viewvideo）。</p><p>Main.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Video video = <span class="keyword">new</span> Video();</span><br><span class="line">        Lecture lecture = <span class="keyword">new</span> Lecture();</span><br><span class="line">        viewNews(video);</span><br><span class="line">        viewNews(lecture);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">viewNews</span><span class="params">(Displayable item)</span> </span>&#123;</span><br><span class="line">        item.display();</span><br><span class="line">        System.out.println(<span class="string">"播放完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    private static void viewLeture(Lecture lecture) &#123;</span></span><br><span class="line"><span class="comment">//        lecture.display();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    private static viewvideo(Video video) &#123;</span></span><br><span class="line"><span class="comment">//        video.display();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java-面向对象概念&quot;&gt;&lt;a href=&quot;#Java-面向对象概念&quot; class=&quot;headerlink&quot; title=&quot;Java 面向对象概念&quot;&gt;&lt;/a&gt;Java 面向对象概念&lt;/h2&gt;&lt;h3 id=&quot;对象的基本概念&quot;&gt;&lt;a href=&quot;#对象的基本概念&quot; c
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Java基本语法简介</title>
    <link href="http://yoursite.com/2018/12/09/Java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2018/12/09/Java基本语法简介/</id>
    <published>2018-12-09T04:44:54.000Z</published>
    <updated>2019-01-02T09:39:27.695Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><p>八种基本类型<br>1.六种数字类型（四种整数型，两个浮点型）：<br>整数型</p><ul><li>byte (1 byte) : -128 ~ +127</li><li>short (2 byte) -32768 ~ 32767</li><li>int （4 byte）  -2147438648 ~ +2147438647 </li><li>long (8 byte) </li><li>unsigned byte (1 byte): 0 ~ 255</li><li>unsigned short (2 bytes): 0 ~ 0~65535</li><li>unsigned int (4 bytes): 0~4294967295</li><li>unsigned long (8 bytes)</li></ul><p>浮点数</p><ul><li><p>float (4 byte): 3.4E-38 - 3.4E+38<br>精度：8, 23</p></li><li><p>double (8 byte):  1.7E-308 —— 1.7E+308<br>精度：11, 52</p></li></ul><p>2.一种字符类型：char</p><p>3.一种布尔类型：boolean</p><p>有且只有这八种基本类型，每种基本类型都有对应的包装类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num <span class="number">5</span></span><br><span class="line"><span class="keyword">double</span> square = <span class="number">13.4</span></span><br><span class="line"><span class="keyword">boolean</span> isUpdated = <span class="keyword">true</span></span><br></pre></td></tr></table></figure><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>对象、数组和枚举都是引用类型Class,Interface,Array,Enum<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Apple a = new Apple();</span><br><span class="line">List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure></p><h2 id="表达式和语句"><a href="#表达式和语句" class="headerlink" title="表达式和语句"></a>表达式和语句</h2><p>表达式就是计算过程</p><ul><li>基本的数学计算<br>“1+2”, “3/5”,”3&gt;5”,”1==2”<br>每个表达式都有一个返回值</li><li>方法调用<br>“sqrt(1)”,”dog.walk()”<br>方法调用可以有返回值<br>方法调用也可以没有返回值（或者说是返回值为空）</li><li>表达式和语句都已”;”表示结束</li></ul><h2 id="变量和赋值"><a href="#变量和赋值" class="headerlink" title="变量和赋值"></a>变量和赋值</h2><ul><li>变量是对一个Java对象的引用</li><li>声明一个变量时候需要指定其类型，表示它可以引用的对象类型</li><li>赋值是把一个对象绑定到一个变量，反过来说，是让一个变量引用到一个对象</li></ul><p>语法：&lt;类型&gt; 变量名 = 值</p><p>eg:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> count = <span class="number">3</span>;</span><br><span class="line">String fruitName = <span class="string">"apple"</span>;</span><br><span class="line"><span class="keyword">double</span> pi = <span class="number">3.1414526</span>;</span><br><span class="line"><span class="keyword">char</span> ch = <span class="string">"x"</span>;</span><br></pre></td></tr></table></figure></p><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><h3 id="逻辑控制语句"><a href="#逻辑控制语句" class="headerlink" title="逻辑控制语句"></a>逻辑控制语句</h3><ul><li><p>if语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式) &#123;</span><br><span class="line">  <span class="comment">//执行语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>if-else 语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式) &#123;</span><br><span class="line">  <span class="comment">// 如果布尔表达式的值为true</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 如果布尔表达式的值为false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>if - else if - else 语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔表达式<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">//布尔表达式1为真时执行的语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(布尔表达式<span class="number">2</span>)&#123;</span><br><span class="line">  <span class="comment">// 布尔表达式2为真时执行的语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//以上都不为真时执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>嵌套if语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">// 布尔表达式1为真时执行的语句</span></span><br><span class="line">  <span class="keyword">if</span>(布尔表达式<span class="number">2</span>) &#123;</span><br><span class="line">    布尔表达式<span class="number">2</span>为真时执行的语句</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>switch 语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression) &#123;</span><br><span class="line">  <span class="keyword">case</span> value:</span><br><span class="line">    <span class="comment">//语句</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> value: </span><br><span class="line">    <span class="comment">//语句</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">//语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h3><p>如果想要同样的操作执行多次，就需要使用循环结构<br>Java中有三种主要的循环结构：</p><ul><li><p>while 循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(布尔表达式) &#123;</span><br><span class="line">  <span class="comment">//循环内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>do…while</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="comment">//代码语句</span></span><br><span class="line">&#125; <span class="keyword">while</span>(布尔表达式);</span><br></pre></td></tr></table></figure></li><li><p>for (循环)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始值; 布尔表达式; 更新) &#123;</span><br><span class="line">  <span class="comment">//代码语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Java类型模型"><a href="#Java类型模型" class="headerlink" title="Java类型模型"></a>Java类型模型</h3><ul><li>类：类是一个模板，它描述一类对象的行为和状态</li><li>对象: 对象是类的一个实例， 有具体的状态</li><li>方法：类中定义的该类的实例对象所具有的行为</li><li><p>静态方法： 隶属于类本身的方法</p></li><li><p>Java里的常量和变量都可以对应于一个对象， 这个对象的行为和具有的属性是由类来定义的</p></li><li>Java 程序的基本结构就是一系列类的定义，类之间的关系和具体类的对象之间的互相操作</li></ul><h4 id="Java类"><a href="#Java类" class="headerlink" title="Java类"></a>Java类</h4><ul><li>类是一个模板，他描述一类对象的行为和状态</li><li>语义上表达的是一类实体（对象）的抽象</li><li>在Java 中的惯例是一个文件中存放一个public类</li></ul><h4 id="Java对象"><a href="#Java对象" class="headerlink" title="Java对象"></a>Java对象</h4><ul><li>对象：对象是类的一个实例</li><li>语义上是表达一个java类的实体</li><li>对象是一般情况下Java语言里的”一等公民”</li><li>对象可以赋值到一个变量</li><li>对象是通过new语句进行创建</li></ul><h4 id="Java方法和成员变量"><a href="#Java方法和成员变量" class="headerlink" title="Java方法和成员变量"></a>Java方法和成员变量</h4><ul><li>方法：类中定义的该类的实例对象所具有的行为</li><li>静态方法： 隶属于类本身的方法</li><li>&lt;返回类型&gt; 方法名（&lt;参数类型&gt; 参数名） {代码;return&lt;返回值&gt;;}</li><li>一个方法由”方法名 + 参数类型”确定</li><li>相同方法名，不同参数类型，是不同的方法（重载）</li><li>成员变量即对象或类中的变量，其作用域在类中，或对象中</li><li>可以用修饰符控制方法和成员变量的作用域</li></ul><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><ul><li>修饰符用于控制变量，类的作用域和一些访问限制</li></ul><h5 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h5><ul><li>访问权限修饰符： public,protected,private,default(即不设置)</li><li>private和protected 不能修饰外部类</li></ul><table><thead><tr><th>修饰符</th><th style="text-align:center">当前类</th><th style="text-align:center">同一包内</th><th style="text-align:center">子孙类（同一包）</th><th style="text-align:center">子孙类（不同包）</th><th style="text-align:center">其他包</th></tr></thead><tbody><tr><td>public</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td></tr><tr><td>protected</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">子孙与基类是否在同一包中</td><td style="text-align:center">N</td></tr><tr><td>default</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">N</td><td style="text-align:center">N</td></tr><tr><td>private</td><td style="text-align:center">Y</td><td style="text-align:center">N</td><td style="text-align:center">N</td><td style="text-align:center">N</td><td style="text-align:center">N</td></tr></tbody></table><h5 id="非访问修饰符"><a href="#非访问修饰符" class="headerlink" title="非访问修饰符"></a>非访问修饰符</h5><p>static 修饰符：用来修饰类方法和类变量<br>final 修饰符：用来修饰类、方法和变量，final修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。<br>abstract 修饰符：用来创建抽象类和抽象方法<br>synchronized和volatile修饰符：主要用于多线程并发编程。</p><h4 id="包和层次结构"><a href="#包和层次结构" class="headerlink" title="包和层次结构"></a>包和层次结构</h4><ul><li>“包”： 用来表示具有层次结构的命名空间</li><li>“package com.jirengu.java-system;”</li><li>层次结构：包 –&gt; 类（对象）–&gt; 方法 –&gt; 代码块</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;h3 id=&quot;基本类型&quot;&gt;&lt;a href=&quot;#基本类型&quot; class=&quot;headerlink&quot; title=&quot;基本类型&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/12/09/hello-world/"/>
    <id>http://yoursite.com/2018/12/09/hello-world/</id>
    <published>2018-12-09T03:41:28.980Z</published>
    <updated>2018-12-09T03:41:28.984Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
